When running:

```bash
west build -b esp32s3_devkitc/esp32s3/procpu -p auto .
```

CMake might stop with:

```
Could NOT find Threads (missing: Threads_FOUND)
...
FATAL ERROR: command exited with status 1: ...
```

This is triggered by WAMR’s top-level `CMakeLists.txt` in `wasm-micro-runtime/`, specifically the lines:

```cmake
set (THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
```

because `WAMR` tries to detect and link `pthread` on the `host` system (Linux, Windows, macOS).

- However, on `Zephyr`, especially for an `ESP32-S3` target, we do not use the host’s pthread library at all. There’s no concept of a local Linux “Threads” library in a cross-compile for an Xtensa SoC.
- So CMake’s `find_package(Threads REQUIRED)` fails with “Could NOT find Threads” because there’s no suitable host pthread dev package to fulfill that requirement in the cross-compilation environment.

Installing host pthread dev files sometimes helps in a purely local scenario, but it can still fail or is semantically incorrect for embedded cross-builds.

The Solution is to bypass `find_package(Threads REQUIRED)` on Zephyr. So, in your WAMR repo file `wasm-micro-runtime/CMakeLists.txt`, locate where it calls:

```cmake
find_package(Threads REQUIRED)
```

and wrap that call in a conditional so it does not run on Zephyr:

```cmake
if (NOT WAMR_BUILD_PLATFORM STREQUAL "zephyr")
  set (THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
endif()
```

then clean and rebuild:

```bash
rm -rf build
west build -b esp32s3_devkitc/esp32s3/procpu -p auto .
```
